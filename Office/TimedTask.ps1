<#
    .NOTES
    ===========================================================================
    Created on:   	Friday November 18, 2016
    Created by:   	CailleauThierry
    Organization: 	Private
    Filename:		    TimedTask.ps1
    Version:          1.0.0.0
    Started from: 	https://github.com/Windos/powershell-depot/blob/master/General/Timesheet.ps1
    ===========================================================================
    .DESCRIPTION
    This is a simple .csv timesheet generation. Unlike Timesheet.ps1 it does not ask what you are doing every 20 min. 
    You are meant to launch TimedTask.bat every time you want to make an entry to today's sheet 
    .EXAMPLE
    - Launch TimedTask.bat every time you want to record the time taken to perform a task. Only press "Enter" / "OK" once the task is complete.
    .FUNCTIONALITY
    - TimedTask.ps1 based on Timesheet.ps1 but records beginning and end time instead. This is meant to be uses as launching a script for each tasks.
    - This version adds date-stamp to the generated .csv file
    - This version removes Type information in the generated .csv file (-NoTypeInformation)
    - You can also add a start menu shortcut launch "TimedTask.ps1 - Shortcut" (some small bugs detected with 2 popup after a while... ...better wait before using) to place in either following directories:
      Autostart for currently logged-on user:
      shell:startup = %appdata%\Microsoft\Windows\Start Menu\Programs\Startup
      And startup folder all users:
      shell:common startup = %programdata%\Microsoft\Windows\Start Menu\Programs\Startup
    .NOTES
    - When editing in excel the double quotes generated by this script get removed for the csv > do not save the .csv after opening in Excel
    - no need to check if timesheet already existing as it is date-tagged
       Ideas for improvement:
    - Need to scan text to auto-detect Categories 
    - need to bring windows to front whent he script starts (and still be able to fade to background...)
#>

#Requires -Version 5

#Time the script is launched at
$Start_Time = (Get-Date)

# Format today's date in the way that can be appended to a file name
$MyDate = (Get-Date).ToShortDateString().Replace('/', '_')

# Adding date to filename
$Filename = $MyDate + '_' + 'timesheet.csv'
$TSPath = Join-Path (Split-Path $profile) "$Filename"

class TSEntry {
  #region properties
  [datetime]$DateTime
  [string]$Duration
  [string]$Category
  [string]$Ticket
  [string]$Activity
  #endregion
	
  #region constructors
  TSEntry([datetime]$DateTime, [string]$Duration, [string]$Category, [string]$Ticket, [string]$Activity)
  {
    $this.DateTime = $DateTime
    $this.Duration = $Duration
    $this.Category = $Category
    $this.Ticket = $Ticket
    $this.Activity = $Activity
  }
  #endregion
	
  #region methods
	
  #endregion
}

function New-TSEntry
{
  Add-Type -AssemblyName Microsoft.VisualBasic # The input box object comes care of VisualBasic
	
  $TSPrompt = 'What are you working on?'
  $TSTitle = 'Timesheet'
  $TSDefault = ''
	
  $entry = [Microsoft.VisualBasic.Interaction]::InputBox($TSPrompt, $TSTitle, $TSDefault)
  # Calculate the duration of the task and returns in a mmmm.ss format (minutes . seconds format)
  [string]$CalculatedTaskDuration = "$(((Get-Date) - ($Start_Time)).Minutes)" + '.' + "$(((Get-Date) - ($Start_Time)).Seconds)"
  $TicketNumber = 'N/A'
  $DefaultCategory = 'L3 Mentee Review'
  #Find if the typed entry contains a ticket number (7 or 8 digits, 7 if you miss to trype the leading 0)
  $entry -match '(?<ticket>(\d{7,8}))'
  if ($Matches){
    $TicketNumber = $Matches.ticket
  }
	
  $result = [TSEntry]::new((Get-Date), $CalculatedTaskDuration, $DefaultCategory, $TicketNumber, $entry)
	
  # Creates a csv file with the Properties as header paramaters by default. If file already exist Export-Csv already only appends a new line / raw
  # Note: if the .csv is open in Excel, the entry will not be added (there might be an Excel option to allow for .csv to be overwritten, but better not open Excel until the end of the day)
  $result | Export-Csv -Path $TSPath -NoTypeInformation -Append
}
  # launch the class function creating a new csv and an entry to it
  New-TSEntry
