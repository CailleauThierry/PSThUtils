<#
    .NOTES
    ===========================================================================
    Created on:   	Monday October 08, 2018
    Created by:   	CailleauThierry
    Organization: 	Private
    Filename:		    SimpleTimedTask.ps1
    Version:        0.0.0.1
    Started from: 	https://github.com/Windos/powershell-depot/blob/master/General/Timesheet.ps1
    ===========================================================================
    .DESCRIPTION
    This is a simple .csv timesheet generation. Unlike Timesheet.ps1 it does not ask what you are doing every 20 min.
	  It record the beginning (when script is launch) to end (when you select OK after entering the text) and calculate the duration between both in min
    You are meant to launch TimedTask.bat every time you want to make an entry to today's sheet

    .EXAMPLE
	  - Pin TimedTask.ps1 Shortcut to the Taskbar. You can setup keboard shortcut to launch it from the shirtcut properties. Only press "Enter" / "OK" once the task is complete.
	  .FUNCTIONALITY
    - removing functinos from TimedTask.ps1
    .NOTES
    - When editing in excel the double quotes generated by this script get removed for the csv > do not save the .csv after opening in Excel
    - no need to check if timesheet already existing as it is date-tagged
       Ideas for improvement:
    - need to bring windows to front when the script starts (and still be able to fade to background...)
#>

#Requires -Version 5

#Time the script is launched at
$Start_Time = (Get-Date)

# Format today's date in the way that can be appended to a file name
$MyDate = (Get-Date).ToShortDateString().Replace('/', '_')

# Adding date to filename

$LogFolder = (Split-Path $profile) + '\' + 'TimedTask_Logs'


if (-not (Test-Path $LogFolder)) { # Test if $LogFolder path exist. If not it creates that path
$Silent = new-item -itemtype directory $LogFolder
}

# Adding date to filename
$Filename = $MyDate + '_' + 'simpletimesheet.csv'
$TSPath = "$LogFolder" + '\' + "$Filename"

class TSEntry {
  #region properties
  [datetime]$DateTime
  [string]$Duration
  [string]$Category
  [string]$Activity
  #endregion

  #region constructors
  TSEntry([datetime]$DateTime, [string]$Duration, [string]$Category, [string]$Activity)
  {
    $this.DateTime = $DateTime
    $this.Duration = $Duration
    $this.Category = $Category
    $this.Activity = $Activity
  }
  #endregion

  #region methods

  #endregion
}

function New-TSEntry
{
  Add-Type -AssemblyName Microsoft.VisualBasic # The input box object comes from VisualBasic

  $TSPrompt = 'What are you working on?'
  $TSTitle = 'Timesheet'
  $TSDefault = ''
  $DefaultCategory = 'My Notes'

  $entry = [Microsoft.VisualBasic.Interaction]::InputBox($TSPrompt, $TSTitle, $TSDefault)


  # Calculate the duration of the task and returns in a mmmm.ss format (minutes . seconds format)
  [string]$CalculatedTaskDuration = '{0:n2}' -f ((Get-Date) - ($Start_Time)).TotalMinutes

  $result = [TSEntry]::new((Get-Date), $CalculatedTaskDuration, $DefaultCategory, $entry)

  # Creates a csv file with the Properties as header paramaters by default. If file already exist Export-Csv already only appends a new line / raw
  # Note: if the .csv is open in Excel, the entry will not be added (there might be an Excel option to allow for .csv to be overwritten, but better not open Excel until the end of the day)
  $result | Export-Csv -Path $TSPath -NoTypeInformation -Append
}
  # launch the class function creating a new csv and an entry to it
  New-TSEntry
