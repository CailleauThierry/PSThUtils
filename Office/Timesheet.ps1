<#
	.NOTES
	===========================================================================
	 Created on:   	Tuesday October 25, 2016
	 Created by:   	CailleauThierry
	 Organization: 	Private
	 Filename:		Timesheet.ps1
	 Started from: 	https://github.com/Windos/powershell-depot/blob/master/General/Timesheet.ps1
	===========================================================================
	.DESCRIPTION
		This is a simple .csv timesheet generation. Set to ask for time every 20 min since last time an entry was added
	.NOTES
		- This version adds date-stamp to the generated .csv file
		- This version removes Type information in the generated .csv file (-NoTypeInformation)
		- This version add a start menu shortcut launch "Timesheet.ps1 - Shortcut" to place in either following directories:
			Autostart for currently logged-on user:
			shell:startup = %appdata%\Microsoft\Windows\Start Menu\Programs\Startup
			And startup folder all users:
			shell:common startup = %programdata%\Microsoft\Windows\Start Menu\Programs\Startup
		- "Timesheet.ps1 - Shortcut" is a shortcut of "Timesheet.ps1" editied to be an executable wrapper of the script
			This allows to avoid other tools dependencies on  bundling into an executable

	.EXAMPLE
		- copy "Timesheet.ps1 - Shortcut" to shell:startup
		- either double click on "Timesheet.ps1 - Shortcut" or restart your PC > in both case accept the pop-up asking you to allow powershell
#>

#Requires -Version 5

<#
	 Ideas for improvement:
		- have a way to enter text for the next pop-up
		- When editing in excel the double quotes generated by this script get removed for the csv
		- have the option to trigger a prompt box when needed
		- no need to check if timesheet already existing as it is date-tagged
		- need to add the next day as another column (manipulating object with import-csv?)
#>
# Format today's date in the way that can be appended to a file name
$MyDate = (Get-date).ToShortDateString().Replace("/", "_")
# Adding date to filename
$Filename = $MyDate + "_" + "timesheet.csv"	
$TSPath = Join-Path (Split-Path $profile) "$Filename"

<# Getting error following (even if the script wprks great):
>> Running (Timesheet.ps1) Script...
>> Platform: V5 64Bit (STA)
ERROR: Split-Path : Cannot bind argument to parameter 'Path' because it is null.
Timesheet.ps1 (28, 33): ERROR: At Line: 28 char: 33
ERROR: + $TSPath = Join-Path (Split-Path $profile) "$Filename"
ERROR: +                                 ~~~~~~~~
ERROR:     + CategoryInfo          : InvalidData: (:) [Split-Path], ParameterBindingValidationException
ERROR:     + FullyQualifiedErrorId : ParameterArgumentValidationErrorNullNotAllowed,Microsoft.PowerShell.Commands.SplitPathCommand
ERROR:
from : http://stackoverflow.com/questions/18742354/myinvocation-mycommand-path-returning-null > i.e. error can be fully ignored
$profile is an automatic variable populated at script run time, then if you execute $profile in a powershell console or ISE isn't populated;
	that's why in your test the $TSPath has no value ($null)
Get-Help about_Automatic_Variables | more
#>

class TSEntry {
	#region properties
	[string]$Name
	[datetime]$Time
	[string]$Activity
	#endregion
	
	#region constructors
	TSEntry([string]$Name, [datetime]$Time, [string]$Activity)
	{
		$this.Name = $Name
		$this.Time = $Time
		$this.Activity = $Activity
	}
	#endregion
	
	#region methods
	
	#endregion
}

function New-TSEntry
{
	Add-Type -AssemblyName Microsoft.VisualBasic # The input box object comes care of VisualBasic
	
	$TSPrompt = 'What are you working on?'
	$TSTitle = 'Timesheet'
	$TSDefault = ''
	
	$entry = [Microsoft.VisualBasic.Interaction]::InputBox($TSPrompt, $TSTitle, $TSDefault)
	
	$result = [TSEntry]::new($env:USERNAME, (Get-Date), $entry)
	
	$result | Export-Csv -Path $TSPath -NoTypeInformation -Append
}

function New-TSReport
{
	$reportDate = (get-date).AddDays(-7)
	$timesheet = Import-Csv -Path $TSPath
	
	foreach ($entry in $timesheet)
	{
		$time = Get-Date $entry.Time
		
		if ($time -ge $reportDate)
		{
			$entry = [TSEntry]::new($entry.name, $time, $entry.Activity)
			$entry
		}
	}
}

while ($true)
{
	New-TSEntry
	Start-Sleep -Seconds 1200 	# prompts every 20 min
}